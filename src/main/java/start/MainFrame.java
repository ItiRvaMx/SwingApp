/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package start;

import config.SwingConfig;
import core.data.access.utils.QueryFilter;
import core.gui.AbstractInternalFrame;
import core.gui.AbstractMainAppFrame;
import core.gui.MessageDialog;
import data.service.DataService;
import data.service.DataserviceFactory;
import data.service.SysuserService;
import data.session.HbSession;
import entities.Sysuser;
import frames.CustomersFrame;
import frames.SysusersFrame;
import java.awt.CardLayout;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import utils.PermissionsLevel;
import utils.StringsHasher;
import utils.ValidationsNotifier;

/**
 *
 * @author astiservices
 */
public class MainFrame extends AbstractMainAppFrame implements ActionListener {
    
    private static final Logger APP_LOGGER = LogManager.getLogger("appLogger");
    
    private final String CARD_LOGIN = "login",
                         CARD_DESKTOP = "desktop",
                         CUSTOMERS_ACTION = "customers",
                         USERS_ACTION = "users",
                         EXIT_ACTION = "exit",
                         LOGOUT_ACTION = "logout";
    private final HashMap<String, AbstractInternalFrame> FRAMES = new HashMap<>();
    private boolean taskIsPending;
    private Sysuser loggedUser;
    
    public final Runnable INIT_CONFIG_FILE_RUNNABLE = new Runnable() {
        @Override
        public void run() {
            setConfig(new SwingConfig("Swing App", "swingapp.properties", null));
            try {
                getConfig().load();
            } catch (IOException ex) {
                MessageDialog.showMessage(null, MessageDialog.Type.ERROR, "Error loading configuration", ex.getMessage(), ex);
                APP_LOGGER.error("Error loading configuration", ex);
            }
            setTaskIsPending(false);
            showCard(CARD_LOGIN);
        }
    },
    INIT_COMPONENTS_PUBLIC_RUNNABLE = new Runnable() {
        @Override
        public void run() {
            initComponents();
            
            itemCustomers.setActionCommand(CUSTOMERS_ACTION);
            itemCustomers.addActionListener(MainFrame.this);
            
            itemUsers.setActionCommand(USERS_ACTION);
            itemUsers.addActionListener(MainFrame.this);
            
            itemLogout.setActionCommand(LOGOUT_ACTION);
            itemLogout.addActionListener(MainFrame.this);
            
            itemExit.setActionCommand(EXIT_ACTION);
            itemExit.addActionListener(MainFrame.this);
            
            mainMenu.setVisible(false);
            setTaskIsPending(false);
        }
    },
    INIT_HIBERNATE_RUNNABLE = new Runnable() {
        @Override
        public void run() {
            HbSession.getInstance().init(getConfig());
            try {
                HbSession.getInstance().beginTransaction();
                HbSession.getInstance().commit();
                APP_LOGGER.info("Hibernate session up and running");
            } catch(Exception ex) {
                APP_LOGGER.fatal("Hibernate session error", ex);
                try {
                    HbSession.getInstance().rollback();
                } catch (Exception ex1) {
                    APP_LOGGER.fatal("Error rolling back!", ex1);
                }
            }
            setTaskIsPending(false);
        }
    },
    INIT_FRAMES_RUNNABLE = new Runnable() {
        @Override
        public void run() {
            // Create frames
            CustomersFrame customersFrame = new CustomersFrame(MainFrame.this);
            FRAMES.put(CUSTOMERS_ACTION, customersFrame);
            desktopPane.add(customersFrame);
            
            SysusersFrame usersFrame = new SysusersFrame(MainFrame.this);
            FRAMES.put(USERS_ACTION, usersFrame);
            desktopPane.add(usersFrame);
            
            setTaskIsPending(false);
        }
    };
    
    public synchronized void setTaskIsPending(boolean value) {
        taskIsPending = value;
    }
    
    public synchronized boolean taskIsPending() {
        return taskIsPending;
                
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnlLogin = new javax.swing.JPanel();
        pnlLoginContent = new javax.swing.JPanel();
        txtUser = new javax.swing.JTextField();
        txtPwd = new javax.swing.JPasswordField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        btnLogin = new javax.swing.JButton();
        desktopPane = new javax.swing.JDesktopPane();
        mainMenu = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        itemCustomers = new javax.swing.JMenuItem();
        itemUsers = new javax.swing.JMenuItem();
        separator = new javax.swing.JPopupMenu.Separator();
        itemLogout = new javax.swing.JMenuItem();
        itemExit = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new java.awt.CardLayout());

        pnlLogin.setLayout(new java.awt.GridBagLayout());

        pnlLoginContent.setPreferredSize(new java.awt.Dimension(310, 150));

        txtPwd.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtPwdKeyPressed(evt);
            }
        });

        jLabel1.setText("Usuario");

        jLabel2.setText("Contraseña");

        btnLogin.setText("Iniciar sesión");
        btnLogin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLoginActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlLoginContentLayout = new javax.swing.GroupLayout(pnlLoginContent);
        pnlLoginContent.setLayout(pnlLoginContentLayout);
        pnlLoginContentLayout.setHorizontalGroup(
            pnlLoginContentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlLoginContentLayout.createSequentialGroup()
                .addGroup(pnlLoginContentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlLoginContentLayout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addGroup(pnlLoginContentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pnlLoginContentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txtUser)
                            .addComponent(txtPwd, javax.swing.GroupLayout.DEFAULT_SIZE, 200, Short.MAX_VALUE)))
                    .addGroup(pnlLoginContentLayout.createSequentialGroup()
                        .addGap(124, 124, 124)
                        .addComponent(btnLogin)))
                .addGap(56, 56, 56))
        );
        pnlLoginContentLayout.setVerticalGroup(
            pnlLoginContentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlLoginContentLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlLoginContentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtUser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addGap(18, 18, 18)
                .addGroup(pnlLoginContentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtPwd, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addGap(18, 18, 18)
                .addComponent(btnLogin)
                .addContainerGap())
        );

        pnlLogin.add(pnlLoginContent, new java.awt.GridBagConstraints());

        getContentPane().add(pnlLogin, "login");
        getContentPane().add(desktopPane, "desktop");

        jMenu1.setText("Inicio");

        itemCustomers.setText("Clientes");
        jMenu1.add(itemCustomers);

        itemUsers.setText("Usuarios");
        jMenu1.add(itemUsers);
        jMenu1.add(separator);

        itemLogout.setText("Cerrar sesión");
        jMenu1.add(itemLogout);

        itemExit.setText("Salir");
        jMenu1.add(itemExit);

        mainMenu.add(jMenu1);

        setJMenuBar(mainMenu);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnLoginActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLoginActionPerformed
        login();
    }//GEN-LAST:event_btnLoginActionPerformed

    private void txtPwdKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtPwdKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER)
            login();
    }//GEN-LAST:event_txtPwdKeyPressed

    
    public static void main(String args[]) {
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        final MainFrame main = new MainFrame();
        main.setPreferredSize(new Dimension(900, 700));
        
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new SwingWorker<Void, Integer>() {
                    SplashFrame splash = new SplashFrame();
                    
                    @Override
                    protected Void doInBackground() throws Exception {
                        splash.pack();
                        splash.setVisible(true);
                        
                        main.setTaskIsPending(true);
                        SwingUtilities.invokeLater(main.INIT_COMPONENTS_PUBLIC_RUNNABLE);
                        while (main.taskIsPending()) {}
                        publish(10);
                        
                        main.setTaskIsPending(true);
                        SwingUtilities.invokeLater(main.INIT_CONFIG_FILE_RUNNABLE);
                        while (main.taskIsPending()) {}
                        publish(20);
                        
                        main.setTaskIsPending(true);
                        SwingUtilities.invokeLater(main.INIT_HIBERNATE_RUNNABLE);
                        while (main.taskIsPending()) {}
                        publish(60);
                        
                        main.setTaskIsPending(true);
                        SwingUtilities.invokeLater(main.INIT_FRAMES_RUNNABLE);
                        while (main.taskIsPending()) {}
                        publish(80);
                        
                        Thread.sleep(500);
                        publish(100);
                        
                        splash.dispose();
                        main.setVisible(true);
                        main.setLocationRelativeTo(null);
                        return null;
                    }

                    @Override
                    protected void process(List<Integer> list) {
                        splash.updateProgress(list.get(0));
                    }
                }.execute();
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnLogin;
    private javax.swing.JDesktopPane desktopPane;
    private javax.swing.JMenuItem itemCustomers;
    private javax.swing.JMenuItem itemExit;
    private javax.swing.JMenuItem itemLogout;
    private javax.swing.JMenuItem itemUsers;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar mainMenu;
    private javax.swing.JPanel pnlLogin;
    private javax.swing.JPanel pnlLoginContent;
    private javax.swing.JPopupMenu.Separator separator;
    private javax.swing.JPasswordField txtPwd;
    private javax.swing.JTextField txtUser;
    // End of variables declaration//GEN-END:variables

    private void showCard(String card) {
        CardLayout layout = (CardLayout)getContentPane().getLayout();
        layout.show(getContentPane(), card);
    }
    
    private void login() {
        if (txtUser.getText().isEmpty()) {
            ValidationsNotifier.highlightMissingJTextField(txtUser);
            MessageDialog.showMessage(null, MessageDialog.Type.INFO, "Datos faltantes", "Indique un nombre de usuario");
            return;
        }
        if (txtPwd.getPassword().length == 0) {
            ValidationsNotifier.highlightMissingJTextField(txtPwd);
            MessageDialog.showMessage(null, MessageDialog.Type.INFO, "Datos faltantes", "Indique una contraseña");
            return;
        }
        String pwdInput = new String(txtPwd.getPassword());
        
        if (txtUser.getText().equals("super") & pwdInput.equals("superpassword")) {
            loggedUser = new Sysuser();
            loggedUser.setPermissions(PermissionsLevel.ADMIN);
            loggedUser.setName("MAIN ADMINISTRATOR");
        } else {
            SysuserService usrService = (SysuserService) DataserviceFactory.getServiceInstance(DataService.SYSUSER);
            List<QueryFilter> filters = new ArrayList<>();
            filters.add(QueryFilter.equal("login", txtUser.getText()));
            List<Sysuser> matches;
            try {
                matches = usrService.getRecordsList(filters, "id", true);
            } catch (Exception ex) {
                APP_LOGGER.error("Error searching user records", ex);
                MessageDialog.showMessage(null, MessageDialog.Type.ERROR,"Error inesperado", "Usuario no encontrado", ex);
                return;
            }
            if (matches.isEmpty()) {
                MessageDialog.showMessage(null, MessageDialog.Type.INFO, "Usuario no registrado",
                        String.format("El usuario \"%s\" no fue encontrado en los registros de acceso", txtUser.getText()));
                return;
            }
            // Usernames are not allowed to be repeated
            loggedUser = matches.get(0);
            boolean credentialsMatch;
            try {
                credentialsMatch = StringsHasher.stringsMatch(pwdInput, loggedUser.getPasswordSalt(), loggedUser.getPassword());
            } catch (Exception ex) {
                APP_LOGGER.error("Error computing hash", ex);
                MessageDialog.showMessage(null, MessageDialog.Type.ERROR, "Intente nuevamente", "No fue posible comprobar la contraseña.");
                loggedUser = null;
                return;
            }
            if (!credentialsMatch) {
                MessageDialog.showMessage(null, MessageDialog.Type.WARN, "Datos incorrectos", "La contraseña proporcionada no es correcta");
                loggedUser = null;
                return;
            }
            itemUsers.setVisible(loggedUser.getPermissions() == PermissionsLevel.ADMIN);
        }        
        
        showCard(CARD_DESKTOP);
        mainMenu.setVisible(true);
    }

    @Override
    public void actionPerformed(ActionEvent ae) {
        switch (ae.getActionCommand()) {
            case CUSTOMERS_ACTION:
            case USERS_ACTION:
                AbstractInternalFrame frame = FRAMES.get(ae.getActionCommand());
                frame.prepareForDisplay();
                frame.setVisible(true);
                break;
            case LOGOUT_ACTION:
                for (AbstractInternalFrame eachFrame : FRAMES.values())
                    eachFrame.setVisible(false);
                loggedUser = null;
                mainMenu.setVisible(false);
                showCard(CARD_LOGIN);
                txtPwd.setText("");
                txtUser.setText("");
                break;
            case EXIT_ACTION:
                System.exit(0);
        }
    }
}
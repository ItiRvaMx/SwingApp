/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package frames;

import core.data.access.utils.QueryFilter;
import core.gui.AbstractInternalFrame;
import core.gui.AbstractMainAppFrame;
import core.gui.EditionBar;
import core.gui.ICrudFrame;
import core.gui.MessageDialog;
import core.gui.RichDataColumn;
import core.gui.RichDataModel;
import data.service.CustomerService;
import data.service.DataService;
import data.service.DataserviceFactory;
import entities.Customer;
import entities.CustomerAddress;
import java.awt.CardLayout;
import java.awt.event.ContainerAdapter;
import java.awt.event.ContainerEvent;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JInternalFrame;
import javax.swing.JOptionPane;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import panels.CustomerAddressPanel;
import utils.ValidationsNotifier;

/**
 *
 * @author astiservices
 */
public class CustomersFrame extends AbstractInternalFrame implements ICrudFrame<Customer> {

    
    private final String LIST_CARD = "list",
                         EDIT_CARD = "edition";
    private final CustomerService DATA_SERVICE;
    private final RichDataModel<Customer> DATA_MODEL;
    private final Logger LOGGER = LogManager.getLogger("appLogger");
    private final List<CustomerAddress> REMOVED_ADDRESSES;
    
    private Integer activeRecordId;
    
    public CustomersFrame(AbstractMainAppFrame mainFrame) {
        super(mainFrame);
        initComponents();
        setDefaultCloseOperation(JInternalFrame.HIDE_ON_CLOSE);
        setClosable(true);
        setMaximizable(true);
        pack();
        
        editBar.setCrudFrame(CustomersFrame.this);
        anchorLabel.setText("");
        
        DATA_MODEL = new RichDataModel<>();
        DATA_MODEL.addColumn(new RichDataColumn("Nombre", "fullName", String.class));
        DATA_MODEL.addColumn(new RichDataColumn("RFC", "vat", String.class));
        DATA_MODEL.addColumn(new RichDataColumn("Activo", "active", Boolean.class));
        DATA_MODEL.loadAvailableMethods(Customer.class);
        
        tblData.setModel(DATA_MODEL);
        tblData.getSelectionModel().addListSelectionListener(new ListSelectionListener() {
            @Override
            public void valueChanged(ListSelectionEvent lse) {
                if (!lse.getValueIsAdjusting()) {
                    editBar.activateState(EditionBar.State.ROW_SELECTED);
                }
            }
        });
        tabAddresses.addContainerListener(new ContainerAdapter() {
            @Override
            public void componentRemoved(ContainerEvent ce) {
                super.componentRemoved(ce);
                CustomerAddressPanel panel = (CustomerAddressPanel)ce.getChild();
                CustomerAddress removed = panel.getAddress();
                if (removed.getId() != null) {
                    removed.setCustomer(null);
                    REMOVED_ADDRESSES.add(removed);
                }
            }
        });
        DATA_SERVICE = (CustomerService) DataserviceFactory.getServiceInstance(DataService.CUSTOMER);
        REMOVED_ADDRESSES = new ArrayList<>();
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jPanel1 = new javax.swing.JPanel();
        editBar = new core.gui.EditionBar();
        jLabel1 = new javax.swing.JLabel();
        pnlContent = new javax.swing.JPanel();
        pnlList = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblData = new javax.swing.JTable();
        txtNameP = new javax.swing.JTextField();
        txtVatP = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        cmbStatus = new javax.swing.JComboBox<>();
        pnlEdition = new javax.swing.JPanel();
        anchorLabel = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        chkStatus = new javax.swing.JCheckBox();
        txtName = new javax.swing.JTextField();
        txtLastName = new javax.swing.JTextField();
        txtVat = new javax.swing.JTextField();
        txtEmail = new javax.swing.JTextField();
        tabAddresses = new javax.swing.JTabbedPane();
        btnAddress = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(800, 600));
        setPreferredSize(new java.awt.Dimension(800, 600));

        jPanel1.setMaximumSize(new java.awt.Dimension(2147483647, 46));
        jPanel1.setMinimumSize(new java.awt.Dimension(484, 46));
        jPanel1.setPreferredSize(new java.awt.Dimension(789, 46));
        jPanel1.setLayout(new java.awt.BorderLayout());
        jPanel1.add(editBar, java.awt.BorderLayout.EAST);

        jLabel1.setBackground(new java.awt.Color(255, 255, 255));
        jLabel1.setFont(new java.awt.Font("Cantarell", 1, 18)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("CAT√ÅLOGO DE CLIENTES");
        jLabel1.setOpaque(true);
        jPanel1.add(jLabel1, java.awt.BorderLayout.CENTER);

        getContentPane().add(jPanel1, java.awt.BorderLayout.PAGE_START);

        pnlContent.setLayout(new java.awt.CardLayout());

        tblData.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jScrollPane1.setViewportView(tblData);

        jLabel2.setText("Nombre completo");

        jLabel3.setText("RFC");

        jLabel8.setText("Estatus");

        cmbStatus.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "-- Todos --", "Activos", "Inactivos" }));

        javax.swing.GroupLayout pnlListLayout = new javax.swing.GroupLayout(pnlList);
        pnlList.setLayout(pnlListLayout);
        pnlListLayout.setHorizontalGroup(
            pnlListLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlListLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlListLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(pnlListLayout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(txtNameP, javax.swing.GroupLayout.PREFERRED_SIZE, 238, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(30, 30, 30)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtVatP, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(41, 41, 41)
                        .addComponent(jLabel8)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cmbStatus, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        pnlListLayout.setVerticalGroup(
            pnlListLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlListLayout.createSequentialGroup()
                .addGap(33, 33, 33)
                .addGroup(pnlListLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtNameP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3)
                    .addComponent(txtVatP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8)
                    .addComponent(cmbStatus, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(30, 30, 30)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(133, Short.MAX_VALUE))
        );

        pnlContent.add(pnlList, "list");

        pnlEdition.setLayout(new java.awt.GridBagLayout());

        anchorLabel.setText("*");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        pnlEdition.add(anchorLabel, gridBagConstraints);

        jLabel4.setText("Nombre");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 0, 0);
        pnlEdition.add(jLabel4, gridBagConstraints);

        jLabel5.setText("Apellido");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 0, 0);
        pnlEdition.add(jLabel5, gridBagConstraints);

        jLabel6.setText("RFC");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 10, 0, 0);
        pnlEdition.add(jLabel6, gridBagConstraints);

        jLabel7.setText("Email");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 10, 0, 0);
        pnlEdition.add(jLabel7, gridBagConstraints);

        chkStatus.setSelected(true);
        chkStatus.setText("Activo");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 0);
        pnlEdition.add(chkStatus, gridBagConstraints);

        txtName.setPreferredSize(new java.awt.Dimension(200, 31));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(10, 5, 0, 0);
        pnlEdition.add(txtName, gridBagConstraints);

        txtLastName.setPreferredSize(new java.awt.Dimension(200, 31));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(10, 5, 0, 0);
        pnlEdition.add(txtLastName, gridBagConstraints);

        txtVat.setPreferredSize(new java.awt.Dimension(200, 31));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 0);
        pnlEdition.add(txtVat, gridBagConstraints);

        txtEmail.setPreferredSize(new java.awt.Dimension(200, 31));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 0);
        pnlEdition.add(txtEmail, gridBagConstraints);

        tabAddresses.setPreferredSize(new java.awt.Dimension(600, 300));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.insets = new java.awt.Insets(10, 5, 0, 0);
        pnlEdition.add(tabAddresses, gridBagConstraints);

        btnAddress.setIcon(new javax.swing.ImageIcon(getClass().getResource("/add.png"))); // NOI18N
        btnAddress.setText("Nueva direcci√≥n");
        btnAddress.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddressActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        pnlEdition.add(btnAddress, gridBagConstraints);

        pnlContent.add(pnlEdition, "edition");

        getContentPane().add(pnlContent, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnAddressActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddressActionPerformed
        CustomerAddressPanel newPanel = new CustomerAddressPanel(null);
        tabAddresses.addTab("", newPanel);
        int newIdx = tabAddresses.getTabCount() - 1;
        tabAddresses.setTitleAt(newIdx, "Sucursal " + newIdx);
        tabAddresses.setTabComponentAt(newIdx, new CustomerAddressPanel.AddressTab("Sucursal " + newIdx, tabAddresses));
        tabAddresses.setSelectedIndex(newIdx);
    }//GEN-LAST:event_btnAddressActionPerformed

    @Override
    public void saveChanges(Customer record) {
        if (record != null) {
            try {
                DATA_SERVICE.createOrUpdate(record);
            } catch (Exception ex) {
                LOGGER.error(ex.getMessage(), ex);
                MessageDialog.showMessage(null, MessageDialog.Type.WARN, "Error de acceso a datos", "No fue posible guardar los cambios", ex);
                return;
            }
            doSearch();
            editBar.activateState(EditionBar.State.STAND_BY);
            clearFields();
            showCard(LIST_CARD);
        }
    }

    @Override
    public void findRecords() {
        doSearch();
        editBar.activateState(EditionBar.State.STAND_BY);
    }

    @Override
    public void delete(Customer record) {
        int choice = MessageDialog.requestConfirmation(null, "Atenci√≥n", "¬øDesea eliminar este cliente?");
        if (choice == JOptionPane.YES_OPTION) {
            try {
                DATA_SERVICE.delete(record);
            } catch(Exception ex) {
                MessageDialog.showMessage(null, MessageDialog.Type.WARN, "Error de acceso a datos", "No fue posible eliminar el cliente", ex);
                return;
            }
            doSearch();
            clearFields();
            showCard(LIST_CARD);
            editBar.activateState(EditionBar.State.STAND_BY);
        }
    }

    @Override
    public void prepareEdition(Customer record) {
        if (record != null) {
            activeRecordId = record.getId();
            txtName.setText(record.getName());
            txtLastName.setText(record.getLastName());
            txtVat.setText(record.getVat());
            txtEmail.setText(record.getEmail());
            chkStatus.setSelected(record.isActive());
            try {
                DATA_SERVICE.initAddresses(record);
            } catch (Exception ex) {
                LOGGER.error(ex.getMessage(), ex);
                MessageDialog.showMessage(null, MessageDialog.Type.WARN, "Error de acceso a datos", "No fue posible cargar las direcciones", ex);
                return;
            }
            for (CustomerAddress address : record.getAddresses()) {
                CustomerAddressPanel panel = new CustomerAddressPanel(address.makeDeepCopy());
                tabAddresses.addTab(address.getName(), panel);
                int idx = tabAddresses.indexOfTab(address.getName());
                CustomerAddressPanel.AddressTab tabComponent = new CustomerAddressPanel.AddressTab(address.getName(), tabAddresses);
                tabAddresses.setTabComponentAt(idx, tabComponent);
            }
        }
        showCard(EDIT_CARD);
        editBar.activateState(EditionBar.State.EDITING);
    }

    @Override
    public void cancelAction() {
        clearFields();
        showCard(LIST_CARD);
        editBar.activateState(EditionBar.State.STAND_BY);
    }
    
    @Override
    public Customer getDataForProcessing() {
        if (editBar.getState() == EditionBar.State.ROW_SELECTED) {
            if (tblData.getSelectedRow() != -1)
                return DATA_MODEL.getRow(tblData.getSelectedRow());
        } else if (editBar.getState() == EditionBar.State.EDITING) {
            if (txtName.getText().isEmpty())
                ValidationsNotifier.highlightMissingJTextField(txtName);
            if (txtVat.getText().isEmpty())
                ValidationsNotifier.highlightMissingJTextField(txtVat);
            
            if (txtName.getText().isEmpty() | txtVat.getText().isEmpty()) {
                MessageDialog.showMessage(null, MessageDialog.Type.INFO, "Datos faltantes", "Compruebe que los campos resaltados tengan un valor");
                return null;
            }
            Customer activeRecord = new Customer();
            activeRecord.setActive(chkStatus.isSelected());
            activeRecord.setEmail(txtEmail.getText());
            activeRecord.setId(activeRecordId);
            activeRecord.setLastName(txtLastName.getText());
            activeRecord.setName(txtName.getText());
            activeRecord.setVat(txtVat.getText());
            activeRecord.getAddresses().addAll(REMOVED_ADDRESSES);
            for (int i = 0; i < tabAddresses.getTabCount(); i++) {
                CustomerAddressPanel panel = (CustomerAddressPanel)tabAddresses.getComponentAt(i);
                if (!panel.hasValidData()) {
                    MessageDialog.showMessage(null, MessageDialog.Type.INFO, "Datos faltantes", "Comprueba que todas las direcciones est√©n llenas");
                    return null;
                }
                activeRecord.getAddresses().add(panel.getAddress());
            }
            return activeRecord;
        }
        return null;
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel anchorLabel;
    private javax.swing.JButton btnAddress;
    private javax.swing.JCheckBox chkStatus;
    private javax.swing.JComboBox<String> cmbStatus;
    private core.gui.EditionBar editBar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPanel pnlContent;
    private javax.swing.JPanel pnlEdition;
    private javax.swing.JPanel pnlList;
    private javax.swing.JTabbedPane tabAddresses;
    private javax.swing.JTable tblData;
    private javax.swing.JTextField txtEmail;
    private javax.swing.JTextField txtLastName;
    private javax.swing.JTextField txtName;
    private javax.swing.JTextField txtNameP;
    private javax.swing.JTextField txtVat;
    private javax.swing.JTextField txtVatP;
    // End of variables declaration//GEN-END:variables

    private void showCard(String card) {
        CardLayout layout = (CardLayout)pnlContent.getLayout();
        layout.show(pnlContent, card);
    }
    
    private void doSearch() {
        List<QueryFilter> filters = new ArrayList<>();
        if (cmbStatus.getSelectedIndex() > 0)
            filters.add(QueryFilter.equal("active", cmbStatus.getSelectedIndex() == 1));
        if (!txtNameP.getText().isEmpty()) {
            List<QueryFilter> orConditions = new ArrayList<>();
            orConditions.add(QueryFilter.ilike("name", txtNameP.getText()));
            orConditions.add(QueryFilter.ilike("lastName", txtNameP.getText()));
            filters.add(QueryFilter.or(orConditions));
        }
        if (!txtVatP.getText().isEmpty())
            filters.add(QueryFilter.ilike("vat", txtVatP.getText()));
        try {
            DATA_MODEL.setData(DATA_SERVICE.getRecordsList(filters, "vat", true));
        } catch (Exception ex) {
            LOGGER.error(ex.getMessage(), ex);
            MessageDialog.showMessage(null, MessageDialog.Type.WARN, "Error de acceso a datos", "No fue posible realizar la b√∫squeda", ex);
        }
    }
    
    private void clearFields() {
        txtEmail.setText("");
        txtLastName.setText("");
        txtName.setText("");
        txtNameP.setText("");
        txtVat.setText("");
        txtVatP.setText("");
        chkStatus.setSelected(true);
        cmbStatus.setSelectedIndex(0);
        tabAddresses.removeAll();
        REMOVED_ADDRESSES.clear();
        tblData.getSelectionModel().clearSelection();
        activeRecordId = null;
    }

    @Override
    public void prepareForDisplay() {
        clearFields();
        showCard(LIST_CARD);
        doSearch();
        editBar.activateState(EditionBar.State.STAND_BY);
    }
}
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package frames;

import core.data.access.utils.QueryFilter;
import core.gui.AbstractInternalFrame;
import core.gui.EditionBar;
import core.gui.ICrudFrame;
import core.gui.MessageDialog;
import core.gui.RichDataColumn;
import core.gui.RichDataModel;
import data.service.DataService;
import data.service.DataserviceFactory;
import data.service.SysuserService;
import entities.Sysuser;
import java.awt.CardLayout;
import java.util.ArrayList;
import java.util.List;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JInternalFrame;
import javax.swing.JOptionPane;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import start.MainFrame;
import utils.PermissionsLevel;
import utils.StringsHasher;
import utils.ValidationsNotifier;

/**
 *
 * @author astiservices
 */
public class SysusersFrame extends AbstractInternalFrame implements ICrudFrame<Sysuser> {

    private final Logger LOGGER = LogManager.getLogger("appLogger");
    private final String LIST_CARD = "list",
                         EDIT_CARD = "edit";
    private final SysuserService DATA_SERVICE;
    private final RichDataModel<Sysuser> DATA_MODEL;
    private Integer activeRecordId;
    
    public SysusersFrame(MainFrame mainFrame) {
        super(mainFrame);
        setDefaultCloseOperation(JInternalFrame.HIDE_ON_CLOSE);
        initComponents();
        setMaximizable(false);
        setClosable(true);
        pack();
        
        lblAnchor.setText("");
        DATA_SERVICE = (SysuserService) DataserviceFactory.getServiceInstance(DataService.SYSUSER);
        
        DATA_MODEL = new RichDataModel<>();
        DATA_MODEL.loadAvailableMethods(Sysuser.class);
        DATA_MODEL.addColumn(new RichDataColumn("Nombre", "name", String.class));
        DATA_MODEL.addColumn(new RichDataColumn("Login", "login", String.class));
        DATA_MODEL.addColumn(new RichDataColumn("Permisos", "permissions", PermissionsLevel.class));
        tblData.setModel(DATA_MODEL);
        tblData.getSelectionModel().addListSelectionListener(new ListSelectionListener() {
            @Override
            public void valueChanged(ListSelectionEvent lse) {
                if (!lse.getValueIsAdjusting())
                    if (tblData.getSelectedRow() != -1)
                        editionBar.activateState(EditionBar.State.ROW_SELECTED);
            }
        });
        editionBar.setCrudFrame(SysusersFrame.this);
        
        DefaultComboBoxModel model = new DefaultComboBoxModel(PermissionsLevel.values());
        model.insertElementAt("---", 0);
        cmbPermissionsP.setModel(model);
        
        cmbPermissions.setModel(new DefaultComboBoxModel<>(PermissionsLevel.values()));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jPanel1 = new javax.swing.JPanel();
        editionBar = new core.gui.EditionBar();
        jLabel1 = new javax.swing.JLabel();
        pnlContent = new javax.swing.JPanel();
        pnlList = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblData = new javax.swing.JTable();
        txtNameP = new javax.swing.JTextField();
        txtLoginP = new javax.swing.JTextField();
        cmbPermissionsP = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        pnlEdit = new javax.swing.JPanel();
        lblAnchor = new javax.swing.JLabel();
        txtName = new javax.swing.JTextField();
        txtLogin = new javax.swing.JTextField();
        txtPwd = new javax.swing.JPasswordField();
        cmbPermissions = new javax.swing.JComboBox();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        txtConfirmPwd = new javax.swing.JPasswordField();

        jPanel1.setPreferredSize(new java.awt.Dimension(489, 50));
        jPanel1.setLayout(new java.awt.BorderLayout());
        jPanel1.add(editionBar, java.awt.BorderLayout.EAST);

        jLabel1.setBackground(new java.awt.Color(255, 255, 255));
        jLabel1.setFont(new java.awt.Font("Cantarell", 1, 18)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Cat√°logo de usuarios");
        jLabel1.setOpaque(true);
        jPanel1.add(jLabel1, java.awt.BorderLayout.CENTER);

        getContentPane().add(jPanel1, java.awt.BorderLayout.NORTH);

        pnlContent.setLayout(new java.awt.CardLayout());

        tblData.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jScrollPane1.setViewportView(tblData);

        jLabel2.setText("Nombre");

        jLabel3.setText("Login");

        jLabel4.setText("Permisos");

        javax.swing.GroupLayout pnlListLayout = new javax.swing.GroupLayout(pnlList);
        pnlList.setLayout(pnlListLayout);
        pnlListLayout.setHorizontalGroup(
            pnlListLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlListLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlListLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(pnlListLayout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addGap(19, 19, 19)
                        .addComponent(txtNameP, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(40, 40, 40)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtLoginP, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(40, 40, 40)
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cmbPermissionsP, 0, 146, Short.MAX_VALUE)))
                .addContainerGap())
        );
        pnlListLayout.setVerticalGroup(
            pnlListLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlListLayout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addGroup(pnlListLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtNameP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3)
                    .addComponent(txtLoginP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4)
                    .addComponent(cmbPermissionsP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 289, Short.MAX_VALUE)
                .addContainerGap())
        );

        pnlContent.add(pnlList, "list");

        pnlEdit.setLayout(new java.awt.GridBagLayout());

        lblAnchor.setText("ANCHOR");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        pnlEdit.add(lblAnchor, gridBagConstraints);

        txtName.setPreferredSize(new java.awt.Dimension(180, 31));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 0, 0);
        pnlEdit.add(txtName, gridBagConstraints);

        txtLogin.setPreferredSize(new java.awt.Dimension(180, 31));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 0, 0);
        pnlEdit.add(txtLogin, gridBagConstraints);

        txtPwd.setPreferredSize(new java.awt.Dimension(180, 31));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 0, 0);
        pnlEdit.add(txtPwd, gridBagConstraints);

        cmbPermissions.setPreferredSize(new java.awt.Dimension(180, 31));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 0, 0);
        pnlEdit.add(cmbPermissions, gridBagConstraints);

        jLabel6.setText("Nombre");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 0, 0);
        pnlEdit.add(jLabel6, gridBagConstraints);

        jLabel7.setText("Login");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 0, 0);
        pnlEdit.add(jLabel7, gridBagConstraints);

        jLabel8.setText("Contrase√±a");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 0, 0);
        pnlEdit.add(jLabel8, gridBagConstraints);

        jLabel9.setText("Permisos");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 0, 0);
        pnlEdit.add(jLabel9, gridBagConstraints);

        jLabel5.setText("Confirmar contrase√±a");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 0, 0);
        pnlEdit.add(jLabel5, gridBagConstraints);

        txtConfirmPwd.setPreferredSize(new java.awt.Dimension(180, 31));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 0, 0);
        pnlEdit.add(txtConfirmPwd, gridBagConstraints);

        pnlContent.add(pnlEdit, "edit");

        getContentPane().add(pnlContent, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    @Override
    public void prepareForDisplay() {
        clearControls();
        doSearch();
        showCard(LIST_CARD);
        editionBar.activateState(EditionBar.State.STAND_BY);
    }

    @Override
    public void saveChanges(Sysuser record) {
        if (record != null) {
            try {
                DATA_SERVICE.createOrUpdate(record);
            } catch (Exception ex) {
                LOGGER.error(ex.getMessage(), ex);
                MessageDialog.showMessage(null, MessageDialog.Type.WARN, "Error de acceso a datos", "No fue posible guardar los cambios", ex);
                return;
            }
            clearControls();
            doSearch();
            showCard(LIST_CARD);
            editionBar.activateState(EditionBar.State.STAND_BY);
        }
    }

    @Override
    public void findRecords() {
        doSearch();
    }

    @Override
    public void delete(Sysuser record) {
        if (record != null) {
            int choice = MessageDialog.requestConfirmation(null, "Atenci√≥n", "¬øDesea eliminar el registro seleccionado?");
            if (choice != JOptionPane.YES_OPTION)
                return;
            try {
                DATA_SERVICE.delete(record);
            } catch (Exception ex) {
                LOGGER.error(ex.getMessage(), ex);
                MessageDialog.showMessage(null, MessageDialog.Type.WARN, "Error de acceso a datos", "No fue posible eliminar el registro", ex);
                return;
            }
            clearControls();
            doSearch();
            showCard(LIST_CARD);
            editionBar.activateState(EditionBar.State.STAND_BY);
        }
    }

    @Override
    public void prepareEdition(Sysuser record) {
        if (record != null) {
            activeRecordId = record.getId();
            txtLogin.setText(record.getLogin());
            txtName.setText(record.getName());
            cmbPermissions.setSelectedItem(record.getPermissions());
        }
        showCard(EDIT_CARD);
        editionBar.activateState(EditionBar.State.EDITING);
    }

    @Override
    public void cancelAction() {
        clearControls();
        showCard(LIST_CARD);
        editionBar.activateState(EditionBar.State.STAND_BY);
    }

    @Override
    public Sysuser getDataForProcessing() {
        if (editionBar.getState() == EditionBar.State.ROW_SELECTED) {
            if (tblData.getSelectedRow() != -1)
                return DATA_MODEL.getRow(tblData.getSelectedRow());
        } else if (editionBar.getState() == EditionBar.State.EDITING) {
            if (txtLogin.getText().isEmpty() & activeRecordId == null)
                ValidationsNotifier.highlightMissingJTextField(txtLogin);
            if (txtPwd.getPassword().length == 0 & activeRecordId == null)
                ValidationsNotifier.highlightMissingJTextField(txtPwd);
            if (activeRecordId == null & (txtLogin.getText().isEmpty() | txtPwd.getPassword().length == 0)) {
                MessageDialog.showMessage(null, MessageDialog.Type.INFO, "Datos faltantes", "Compruebe que los campos resaltados tengan un valor");
                return null;
            }
            
            String pwd = new String(txtPwd.getPassword());
            if (!pwd.isEmpty() & pwd.length() < 10) {
                ValidationsNotifier.displaySimpleTooltipForJTextField(txtPwd, 0, "La contrase√±a debe tener al menos 10 caracteres");
                return null;
            }
            String pwdConfirm = new String(txtConfirmPwd.getPassword());
            if (!pwdConfirm.isEmpty() & !pwd.equals(pwdConfirm)) {
                ValidationsNotifier.displaySimpleTooltipForJTextField(txtConfirmPwd, 3000, "Las contrase√±as no coinciden.");
                return null;
            }
            
            Sysuser user = new Sysuser();
            user.setId(activeRecordId);
            user.setLogin(txtLogin.getText());
            user.setName(txtName.getText());
            if (activeRecordId == null | !pwd.isEmpty()) {
                StringsHasher.HashedPair creds;
                try {
                    creds = StringsHasher.digestString(pwd);
                } catch (Exception ex) {
                    LOGGER.error(ex.getMessage(), ex);
                    MessageDialog.showMessage(null, MessageDialog.Type.WARN, "Error de criptograf√≠a", "No fue posible guardar los cambios", ex);
                    return null;
                }
                user.setPassword(creds.digestedPassword);
                user.setPasswordSalt(creds.b64Salt);
            }
            user.setPermissions((PermissionsLevel) cmbPermissions.getSelectedItem());
            return user;
        }
        return null;
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox cmbPermissions;
    private javax.swing.JComboBox<String> cmbPermissionsP;
    private core.gui.EditionBar editionBar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblAnchor;
    private javax.swing.JPanel pnlContent;
    private javax.swing.JPanel pnlEdit;
    private javax.swing.JPanel pnlList;
    private javax.swing.JTable tblData;
    private javax.swing.JPasswordField txtConfirmPwd;
    private javax.swing.JTextField txtLogin;
    private javax.swing.JTextField txtLoginP;
    private javax.swing.JTextField txtName;
    private javax.swing.JTextField txtNameP;
    private javax.swing.JPasswordField txtPwd;
    // End of variables declaration//GEN-END:variables

    private void showCard(String card) {
        CardLayout layout = (CardLayout)pnlContent.getLayout();
        layout.show(pnlContent, card);
    }
 
    private void clearControls() {
        txtLogin.setText("");
        txtLoginP.setText("");
        txtName.setText("");
        txtNameP.setText("");
        txtPwd.setText("");
        txtConfirmPwd.setText("");
        cmbPermissions.setSelectedIndex(0);
        cmbPermissionsP.setSelectedIndex(0);
        tblData.getSelectionModel().clearSelection();
        activeRecordId = null;
    }
    
    private void doSearch() {
        List<QueryFilter> filters = new ArrayList<>();
        if (!txtLoginP.getText().isEmpty())
            filters.add(QueryFilter.ilike("login", txtLoginP.getText()));
        if (!txtNameP.getText().isEmpty())
            filters.add(QueryFilter.ilike("name", txtNameP.getText()));
        if (cmbPermissionsP.getSelectedIndex() > 0)
            filters.add(QueryFilter.equal("permissions", cmbPermissionsP.getSelectedItem()));
        try {
            DATA_MODEL.setData(DATA_SERVICE.getRecordsList(filters, "login", true));
        } catch (Exception ex) {
            LOGGER.error(ex.getMessage(), ex);
            MessageDialog.showMessage(null, MessageDialog.Type.WARN, "Error de acceso a datos", "No fue posible completar la b√∫squeda", ex);
        }
    }
}